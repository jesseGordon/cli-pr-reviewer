name: Build and Release Executables

on:
  push:
    tags:
      - 'v*' # Run on version tags (e.g., v1.0.0)
  workflow_dispatch: # Allow manual triggers

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            binary_name: pr-review-linux
            asset_name: pr-review-linux
          - os: windows-latest
            binary_name: pr-review.exe
            asset_name: pr-review-windows.exe
          - os: macos-latest
            binary_name: pr-review-macos
            asset_name: pr-review-macos

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pyinstaller
      
      - name: Create entry point script
        run: |
          echo "#!/usr/bin/env python3" > cli_entry_point.py
          echo "# Entry point script for PyInstaller" >> cli_entry_point.py
          echo "from pr_review.cli import main" >> cli_entry_point.py
          echo "" >> cli_entry_point.py
          echo "if __name__ == \"__main__\":" >> cli_entry_point.py
          echo "    main()" >> cli_entry_point.py
      
      - name: Build with PyInstaller (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          pyinstaller --onefile --name "${{ matrix.binary_name }}" --clean --noconfirm --add-data "README.md:." cli_entry_point.py
      
      - name: Build with PyInstaller (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --onefile --name "${{ matrix.binary_name }}" --clean --noconfirm --add-data "README.md;." cli_entry_point.py
      
      - name: Test executable (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          chmod +x dist/${{ matrix.binary_name }}
          ./dist/${{ matrix.binary_name }} --version
      
      - name: Test executable (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          dist\${{ matrix.binary_name }} --version
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: dist/${{ matrix.binary_name }}
          if-no-files-found: error

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    # Only run on tag pushes, not manual triggers
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/pr-review-linux/pr-review-linux
            artifacts/pr-review-windows.exe/pr-review.exe
            artifacts/pr-review-macos/pr-review-macos 